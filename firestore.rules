/**
 * @fileoverview Firestore Security Rules for EcoBot Application
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, owner-centric data model.  User data is generally private and only accessible to the authenticated user. Public data (events, posts) is readable by all but writable only by authenticated, authorized users.
 *
 * Data Structure:
 * - /users/{userId}:  Stores profile data, secured with owner-only access.
 * - /users/{userId}/chatHistory/{messageId}: Chat history, secured with owner-only access.
 * - /alerts/{alertId}: Alerts for all users.
 * - /events/{eventId}: Public community events, readable by all, writable by authorized users.
 * - /posts/{postId}: Public community posts, readable by all, writable by authorized users.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed.
 * - Public data (events, posts) is readable by all users, including unauthenticated users.
 * - Ambiguous relationships default to strict owner-only access.
 * - To reduce rule complexity and improve performance, data required for authorization (e.g., ownership) is denormalized directly into the documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants owner-only access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'eep8KGiMBhNQmFI2kCidwZ3nWs03' can create a profile with document ID 'eep8KGiMBhNQmFI2kCidwZ3nWs03'.
     * @deny (create) User with UID 'eep8KGiMBhNQmFI2kCidwZ3nWs03' cannot create a profile with document ID 'differentUserId'.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isSelfCreation(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants owner-only access to chat history for a specific user.
     * @path /users/{userId}/chatHistory/{messageId}
     * @allow (create) User with UID 'eep8KGiMBhNQmFI2kCidwZ3nWs03' can create chat message under their own user ID.
     * @deny (create) User with UID 'eep8KGiMBhNQmFI2kCidwZ3nWs03' cannot create chat message under a different user ID.
     * @principle Restricts chat history access to the owning user.
     */
    match /users/{userId}/chatHistory/{messageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to alerts data.
     * @path /alerts/{alertId}
     * @allow (get) Any user can get an alert.
     * @deny (create) No one can create an alert without authorization.
     * @principle Controls access to alert messages.
     */
    match /alerts/{alertId} {
      allow get: if true;
      allow list: if false;
      allow create: if false; // TODO: Define alert creation rules for authorized services.
      allow update: if false; // TODO: Define alert update rules for authorized services.
      allow delete: if false; // TODO: Define alert deletion rules for authorized services.
    }

    /**
     * @description Grants public read access to events, with owner-only write access.
     * @path /events/{eventId}
     * @allow (get) Any user can read an event.
     * @allow (create) Authenticated user can create an event.
     * @deny (update) Non-owner cannot update an event.
     * @principle Allows public read access while enforcing ownership for modifications.
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // Any signed-in user can create an event.
      allow update: if isExistingOwner(resource.data.organizerId);
      allow delete: if isExistingOwner(resource.data.organizerId);
    }

    /**
     * @description Grants public read access to posts, with owner-only write access.
     * @path /posts/{postId}
     * @allow (get) Any user can read a post.
     * @allow (create) Authenticated user can create a post.
     * @deny (update) Non-owner cannot update a post.
     * @principle Allows public read access while enforcing ownership for modifications.
     */
    match /posts/{postId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // Any signed-in user can create a post.
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }

    function isSelfCreation(userId) {
        return isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
    }
  }
}
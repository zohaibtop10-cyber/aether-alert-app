/**
 * @file Firebase Security Rules for ECOWARRIOR Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private user data (profiles, chat history, alerts) and allows public read access to environmental data.  All write operations on user-owned data require authentication and authorization against the user's ID.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the authenticated user can read/write their own profile.
 * - /users/{userId}/chatHistory/{chatId}: Stores chat history for each user.  Only the authenticated user can read/write their own chat history.
 * - /users/{userId}/alerts/{alertId}: Stores alerts for each user. Only the authenticated user can read/write their own alerts.
 * - /environmentalData/{dataId}: Stores global environmental data. This data is publicly readable, but write access is not permitted.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Environmental data is publicly readable, but writes are disabled.
 * - Write access to user data is strictly owner-controlled.
 * - No data shape validation is performed (prototyping mode).
 *
 * Denormalization for Authorization:
 *  - User-specific collections (`aiChats`, `alerts`) contain a `userId` field that MUST match the parent path's `userId`. This avoids the need for complex `get()` calls to the `/users/{userId}` document to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create, update, delete) - Authenticated user with matching userId.
     * @allow (get) - Authenticated user with matching userId.
     * @allow (list) - Denied.
     * @deny (create, update, delete) - Unauthorized user or mismatched userId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Verify user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Verify that the userId matches the authenticated user's ID
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Verify that the userId matches the authenticated user's ID and that resource exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow read access to the user's own profile.
      allow get: if isOwner(userId);

      // Only allow listing if specifically required
      allow list: if false;

      // Allow creation if the user is authenticated and the userId matches
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow updates if the user is the owner and the ID hasn't changed
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow deletion if the user is the owner
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to chat history for a specific user.
     * @path /users/{userId}/chatHistory/{chatId}
     * @allow (create, update, delete) - Authenticated user with matching userId.
     * @allow (get, list) - Authenticated user with matching userId.
     * @deny (create, update, delete) - Unauthorized user or mismatched userId.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/chatHistory/{chatId} {
      // Verify user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Verify that the userId matches the authenticated user's ID
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Verify that the userId matches the authenticated user's ID and that resource exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow read access to the chat history if the user is the owner
      allow get: if isOwner(userId);

      // Allow listing of chat history if the user is the owner
      allow list: if isOwner(userId);

      // Allow creation of chat history if the user is the owner and the userId matches
      allow create: if isOwner(userId) && request.resource.data.userId == userId;

      // Allow updates to chat history if the user is the owner
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      // Allow deletion of chat history if the user is the owner
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to alerts for a specific user.
     * @path /users/{userId}/alerts/{alertId}
     * @allow (create, update, delete) - Authenticated user with matching userId.
     * @allow (get, list) - Authenticated user with matching userId.
     * @deny (create, update, delete) - Unauthorized user or mismatched userId.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/alerts/{alertId} {
      // Verify user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Verify that the userId matches the authenticated user's ID
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Verify that the userId matches the authenticated user's ID and that resource exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow read access to the alerts if the user is the owner
      allow get: if isOwner(userId);

      // Allow listing of alerts if the user is the owner
      allow list: if isOwner(userId);

      // Allow creation of alerts if the user is the owner and the userId matches
      allow create: if isOwner(userId) && request.resource.data.userId == userId;

      // Allow updates to alerts if the user is the owner
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      // Allow deletion of alerts if the user is the owner
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to environmental data.  This data is publicly readable, but only authorized clients can write.
     * @path /environmentalData/{dataId}
     * @allow (get, list) - Anyone can read.
     * @deny (create, update, delete) - No one can write.
     * @principle Allows public read access with owner-only writes.
     */
    match /environmentalData/{dataId} {
      // Allow read access to anyone.
      allow get, list: if true;

      // Disallow any writes (create, update, delete) to environmental data.
      allow create, update, delete: if false;
    }
  }
}
{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user in the ECOWARRIOR application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "displayName": {
          "type": "string",
          "description": "User's display name."
        },
        "location": {
          "type": "string",
          "description": "User's preferred location (e.g., city, coordinates)."
        },
        "preferences": {
          "type": "string",
          "description": "User's environmental preferences or health conditions (e.g., asthma)."
        }
      },
      "required": [
        "id",
        "email"
      ]
    },
    "AIChat": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AIChat",
      "type": "object",
      "description": "Represents a chat session between a user and the EcoBot AI assistant.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the chat session."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who initiated the chat. (Relationship: User 1:N AIChat)"
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of the chat session.",
          "format": "date-time"
        },
        "messages": {
          "type": "array",
          "description": "An array of chat messages.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "userId",
        "timestamp",
        "messages"
      ]
    },
    "Alert": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Alert",
      "type": "object",
      "description": "Represents an environmental or health alert generated by the EcoBot.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the alert."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who should receive the alert. (Relationship: User 1:N Alert)"
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the alert was generated.",
          "format": "date-time"
        },
        "type": {
          "type": "string",
          "description": "Type of alert (e.g., air pollution, temperature anomaly, rainstorm)."
        },
        "message": {
          "type": "string",
          "description": "Alert message with condition summary and preventive tip."
        },
        "link": {
          "type": "string",
          "description": "Link to the dashboard for full alert details."
        }
      },
      "required": [
        "id",
        "userId",
        "timestamp",
        "type",
        "message"
      ]
    },
    "EnvironmentalData": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EnvironmentalData",
      "type": "object",
      "description": "Represents environmental data fetched from NASA or other sources.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the data entry."
        },
        "location": {
          "type": "string",
          "description": "Location of the data (e.g., city, coordinates)."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the data was recorded.",
          "format": "date-time"
        },
        "temperature": {
          "type": "number",
          "description": "Temperature reading."
        },
        "humidity": {
          "type": "number",
          "description": "Humidity reading."
        },
        "airQuality": {
          "type": "number",
          "description": "Air quality index (AQI) or PM2.5 value."
        },
        "rainfall": {
          "type": "number",
          "description": "Rainfall measurement."
        },
        "dataSource": {
          "type": "string",
          "description": "Source of the data (e.g., NASA POWER, Open-Meteo)."
        }
      },
      "required": [
        "id",
        "location",
        "timestamp",
        "dataSource"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles.  User data is private and accessible only to the authenticated user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/chatHistory/{chatId}",
        "definition": {
          "entityName": "AIChat",
          "schema": {
            "$ref": "#/backend/entities/AIChat"
          },
          "description": "Stores chat history for each user. Includes denormalized 'userId' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "chatId",
              "description": "The unique identifier of the chat session."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/alerts/{alertId}",
        "definition": {
          "entityName": "Alert",
          "schema": {
            "$ref": "#/backend/entities/Alert"
          },
          "description": "Stores alerts for each user. Includes denormalized 'userId' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "alertId",
              "description": "The unique identifier of the alert."
            }
          ]
        }
      },
      {
        "path": "/environmentalData/{dataId}",
        "definition": {
          "entityName": "EnvironmentalData",
          "schema": {
            "$ref": "#/backend/entities/EnvironmentalData"
          },
          "description": "Stores environmental data collected from NASA and other sources.  This data is globally accessible.",
          "params": [
            {
              "name": "dataId",
              "description": "The unique identifier for the environmental data entry."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure authorization independence, clarity, and scalability for the ECOWARRIOR AI assistant. It leverages denormalization and structural segregation to simplify security rules and optimize data access.  Authorization independence is achieved by denormalizing user-specific data and preferences directly into the `aiChats` and `alerts` collections, eliminating the need for complex `get()` calls in security rules. This allows for atomic operations and easier debugging.\n\nStructural segregation is used to separate user-specific data (chat history, alerts) into subcollections under the `/users/{userId}` path, while global environmental data is stored in a separate `environmentalData` collection. This simplifies security rules, as each collection has a homogeneous security posture. The `Membership Map` approach isn't used because the primary data model is based on user-owned data (1:N relationships) and global data.\n\nThe structure supports required QAPs:\n\n1.  **Secure List Operations:** Path-based ownership (`/users/{userId}/chatHistory`, `/users/{userId}/alerts`) allows listing operations to be secured based on the `request.auth.uid` without needing complex filtering.\n2.  **Data Integrity:** Timestamps and ownership are explicitly enforced in the schema, ensuring consistency and traceability."
  }
}